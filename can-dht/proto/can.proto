syntax = "proto3";

package can;

option go_package = "github.com/can-dht/internal/proto";

// CANService defines the CAN DHT service
service CANService {
    // Node operations
    rpc Join(JoinRequest) returns (JoinResponse);
    rpc Leave(LeaveRequest) returns (LeaveResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc FindNode(FindNodeRequest) returns (FindNodeResponse);
    rpc GetNeighbors(GetNeighborsRequest) returns (GetNeighborsResponse);

    // DHT operations
    rpc Put(PutRequest) returns (PutResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Delete(DeleteRequest) returns (DeleteResponse);

    // Multi-hop replication operations
    rpc ReplicatePut(ReplicatePutRequest) returns (ReplicatePutResponse);
    rpc ReplicateDelete(ReplicateDeleteRequest) returns (ReplicateDeleteResponse);
    rpc SyncReplicaMetadata(SyncReplicaMetadataRequest) returns (SyncReplicaMetadataResponse);
    
    // Load balancing operations
    rpc ProposeZoneAdjustment(ZoneAdjustmentProposalRequest) returns (ZoneAdjustmentProposalResponse);
    rpc TransferKey(TransferKeyRequest) returns (TransferKeyResponse);
}

// Point represents a point in the coordinate space
message Point {
    repeated double coordinates = 1;
}

// Zone represents a zone in the coordinate space
message Zone {
    Point min_point = 1;
    Point max_point = 2;
}

// NodeInfo contains information about a node
message NodeInfo {
    string id = 1;
    string address = 2;
    Zone zone = 3;
}

// JoinRequest is sent when a node wants to join the network
message JoinRequest {
    string new_node_id = 1;
    string new_node_address = 2;
    Point join_point = 3;
}

// JoinResponse is sent in response to a join request
message JoinResponse {
    bool success = 1;
    string message = 2;
    Zone assigned_zone = 3;
    repeated NodeInfo neighbors = 4;
    map<string, bytes> data = 5;
}

// LeaveRequest is sent when a node wants to leave the network
message LeaveRequest {
    string node_id = 1;
    map<string, bytes> data = 2;
}

// LeaveResponse is sent in response to a leave request
message LeaveResponse {
    bool success = 1;
    string message = 2;
}

// HeartbeatRequest is sent periodically to check if neighbors are alive
message HeartbeatRequest {
    string node_id = 1;
    int64 timestamp = 2;
}

// HeartbeatResponse acknowledges a heartbeat
message HeartbeatResponse {
    bool success = 1;
    int64 timestamp = 2;
}

// FindNodeRequest is sent to find the node responsible for a key or point
message FindNodeRequest {
    oneof target {
        string key = 1;
        Point point = 2;
    }
}

// FindNodeResponse contains information about the node responsible for a key or point
message FindNodeResponse {
    bool success = 1;
    string message = 2;
    NodeInfo responsible_node = 3;
}

// GetNeighborsRequest is sent to get a list of a node's neighbors
message GetNeighborsRequest {
    string requesting_node_id = 1;
    int32 max_hops = 2;
}

// GetNeighborsResponse contains a list of neighbors
message GetNeighborsResponse {
    repeated NeighborEntry neighbors = 1;
}

// NeighborEntry contains information about a neighbor
message NeighborEntry {
    string node_id = 1;
    string address = 2;
    repeated double min_coordinates = 3;
    repeated double max_coordinates = 4;
}

// PutRequest stores a key-value pair
message PutRequest {
    string key = 1;
    bytes value = 2;
    bool forward = 3;
}

// PutResponse is sent in response to a put request
message PutResponse {
    bool success = 1;
    string message = 2;
}

// GetRequest retrieves a value by key
message GetRequest {
    string key = 1;
    bool forward = 2;
}

// GetResponse is sent in response to a get request
message GetResponse {
    bool success = 1;
    string message = 2;
    bool exists = 3;
    bytes value = 4;
}

// DeleteRequest removes a key-value pair
message DeleteRequest {
    string key = 1;
    bool forward = 2;
}

// DeleteResponse is sent in response to a delete request
message DeleteResponse {
    bool success = 1;
    string message = 2;
    bool existed = 3;
}

// ReplicatePutRequest is used for multi-hop replication of put operations
message ReplicatePutRequest {
    string key = 1;
    bytes value = 2;
    int32 replication_hop = 3;
    int32 max_replication_hops = 4;
    repeated string path = 5;
    string origin_node_id = 6;
}

// ReplicatePutResponse acknowledges a replicate put request
message ReplicatePutResponse {
    bool success = 1;
    string message = 2;
}

// ReplicateDeleteRequest is used for multi-hop replication of delete operations
message ReplicateDeleteRequest {
    string key = 1;
    int32 replication_hop = 2;
    int32 max_replication_hops = 3;
    repeated string path = 4;
    string origin_node_id = 5;
}

// ReplicateDeleteResponse acknowledges a replicate delete request
message ReplicateDeleteResponse {
    bool success = 1;
    string message = 2;
}

// SyncReplicaMetadataRequest is used to synchronize replica metadata
message SyncReplicaMetadataRequest {
    string node_id = 1;
    repeated ReplicaMetadataEntry entries = 2;
}

// ReplicaMetadataEntry contains metadata about a replica
message ReplicaMetadataEntry {
    string key = 1;
    repeated string replica_nodes = 2;
    int64 version = 3;
    int64 last_update_time = 4;
}

// SyncReplicaMetadataResponse acknowledges a metadata sync request
message SyncReplicaMetadataResponse {
    bool success = 1;
    string message = 2;
}

// ZoneAdjustmentProposalRequest is sent to propose a zone adjustment
message ZoneAdjustmentProposalRequest {
    string proposer_id = 1;
    string target_id = 2;
    int32 dimension = 3;
    double proposed_boundary = 4;
    double current_load = 5;
    string proposal_id = 6;
}

// ZoneAdjustmentProposalResponse is sent in response to a zone adjustment proposal
message ZoneAdjustmentProposalResponse {
    bool accepted = 1;
    string reason = 2;
}

// TransferKeyRequest is sent to transfer a key during zone adjustment
message TransferKeyRequest {
    string key = 1;
    bytes value = 2;
}

// TransferKeyResponse is sent in response to a key transfer
message TransferKeyResponse {
    bool success = 1;
    string error = 2;
} 